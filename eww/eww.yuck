(defwindow main
  :exclusive true
  :monitor 0
  :geometry (geometry
              :width "100%"
              :height "38px"
              :anchor "bottom center")
  (bar)
)

(defwidget bar [] (centerbox :class "bar" (left) "" (right)))

(defwidget left []
  (box :halign "start"
    (workspaces)
  )
)

(defwidget right []
  (box :halign "end"
    :space-evenly false
    :spacing 30
    (disk)
    (mem)
    (cpu)
    (net)
    (time)
    (date)
  )
)

(deflisten get-workspaces :initial "[]" `bash ~/.config/eww/scripts/get-workspaces`)

(defwidget workspaces []
  (box
    (for workspace in get-workspaces
      (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
        :width 35
        :class "workspace${workspace.current ? "-current" : ""}"
        (label :text "${workspace.id}")
      )
    )
  )
)

(defpoll time :interval "1s" :initial "" `date "+%H:%M"`)

(defwidget time []
  (box :class "time" (label :text "${time}"))
)

(defpoll date :interval "1s" `date "+%d %b %Y"`)

(defwidget date []
  (box :class "date" (label :text "${date}"))
)

(defwidget cpu []
  (box
    (label :text "CPU ")
    (for core in {EWW_CPU["cores"]}
      (box
        :class "cpu-core"
        (label :text "${core["usage"]} ")
      )
    )
  )
)

(defwidget mem []
  (box (label :text "Mem ${EWW_RAM['used_mem_perc']}"))
)

(defwidget net []
  (box (label :text "Net ${EWW_NET['up']}"))
)

(defwidget disk []
  (box (label :text "Sto ${EWW_DISK['used_perc']}"))
)
